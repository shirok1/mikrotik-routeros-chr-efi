name: build

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  CHR_VERSION: 7.15.3

jobs:
  build:
    name: Build ${{matrix.disk_type}}.qcow2

    runs-on: ubuntu-latest

    # if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    strategy:
      matrix:
        disk_type: [mbr, gpt]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check server configuration
        run: |
          echo -e "--------------------------CPU Info--------------------------"
          echo "CPU Physical Num: $(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU Core Num: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------Memory Info--------------------------"
          echo "Installed Memory Details:"
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "---------------------------Disk Info---------------------------"
          echo -e  "Disk Num: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "Disk Details:"
          df -Th

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt update
          sudo -E apt -y install curl qemu-utils rsync unzip zip
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Load nbd module
        run: |
          sudo -E modprobe nbd

      - name: Download
        run: |
          curl -skL --retry 3 --connect-timeout 3 -o chr.img.zip https://github.com/elseif/MikroTikPatch/releases/download/${{env.CHR_VERSION}}/chr-${{env.CHR_VERSION}}.img.zip
          unzip chr.img.zip
          rm chr.img.zip

      - name: Convert to qcow2
        run: |
          mv chr-*.img chr.img
          qemu-img convert -f raw -O qcow2 chr.img chr.qcow2
          cp -af chr.qcow2 chr-efi.qcow2
          rm chr.img

      - name: Connect ndb
        run: |
          sudo -E qemu-nbd -c /dev/nbd0 chr.qcow2
          sudo -E qemu-nbd -c /dev/nbd1 chr-efi.qcow2

      - name: Format boot partition
        run: |
          sudo -E mkfs -t fat /dev/nbd1p1

      - name: Create tmp dir
        run: |
          sudo -E mkdir /tmp/chr-bios/
          sudo -E mkdir /tmp/chr-efi/

      - name: Mount
        run: |
          sudo -E mount /dev/nbd0p1 /tmp/chr-bios/
          sudo -E mount /dev/nbd1p1 /tmp/chr-efi/

      - name: Sync files
        run: |
          sudo -E rsync -a /tmp/chr-bios/ /tmp/chr-efi/

      - name: Umount
        run: |
          sudo -E umount /dev/nbd0p1
          sudo -E umount /dev/nbd1p1

      - name: Create Hybrid MBR
        if: matrix.disk_type == 'gpt'
        run: |
          (
          echo 2 # use GPT
          echo t # change partition code
          echo 1 # select first partition
          echo 8300 # change code to Linux filesystem 8300
          echo r # Recovery/transformation
          echo h # Hybrid MBR
          echo 1 2 # partitions added to the hybrid MBR
          echo n # Place EFI GPT (0xEE) partition first in MBR (good for GRUB)? (Y/N)
          echo   # Enter an MBR hex code (default 83)
          echo y # Set the bootable flag? (Y/N)
          echo   # Enter an MBR hex code (default 83)
          echo n # Set the bootable flag? (Y/N)
          echo n # Unused partition space(s) found. Use one to protect more partitions? (Y/N)
          echo w # write changes to disk
          echo y # confirm
          ) | sudo -E gdisk /dev/nbd1
  
      - name: Disconnect ndb
        run: |
          sudo -E qemu-nbd -d /dev/nbd0
          sudo -E qemu-nbd -d /dev/nbd1
      
      - run: |
          mv chr-efi.qcow2 chr-efi-${{env.CHR_VERSION}}-${{matrix.disk_type}}.qcow2

      - uses: actions/upload-artifact@v4
        with:
          name: chr-efi-${{env.CHR_VERSION}}-${{matrix.disk_type}}.qcow2
          path: chr-efi-${{env.CHR_VERSION}}-${{matrix.disk_type}}.qcow2

  release:
    name: Release

    needs: build
  
    permissions:
      contents: write # for release creation

    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: firmware
          merge-multiple: true
      - name: Convert images
        run: |
          for disk_type in mbr gpt; do
            qemu-img convert -f qcow2 -O vmdk firmware/chr-efi-${{env.CHR_VERSION}}-${disk_type}.qcow2 chr-efi-${{env.CHR_VERSION}}-${disk_type}.vmdk
            qemu-img convert -f qcow2 -O vpc firmware/chr-efi-${{env.CHR_VERSION}}-${disk_type}.qcow2 chr-efi-${{env.CHR_VERSION}}-${disk_type}.vhd
            qemu-img convert -f qcow2 -O vhdx firmware/chr-efi-${{env.CHR_VERSION}}-${disk_type}.qcow2 chr-efi-${{env.CHR_VERSION}}-${disk_type}.vhdx
            qemu-img convert -f qcow2 -O vdi firmware/chr-efi-${{env.CHR_VERSION}}-${disk_type}.qcow2 chr-efi-${{env.CHR_VERSION}}-${disk_type}.vdi
            qemu-img convert -f qcow2 -O raw firmware/chr-efi-${{env.CHR_VERSION}}-${disk_type}.qcow2 chr-efi-${{env.CHR_VERSION}}-${disk_type}.img
          done

      - name: Zip images
        run: |
          for i in chr-efi-${{env.CHR_VERSION}}-*; do zip $i.zip $i; done
          ls -l

      - name: Upload Firmware to release
        uses: ncipollo/release-action@v1
        with:
          name: ${{env.CHR_VERSION}}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{env.CHR_VERSION}}
          commit: master
          artifacts: ./*.zip
